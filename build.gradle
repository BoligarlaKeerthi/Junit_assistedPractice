steps to create gradle project:

  First go to file select new then gradle project.
Gradle project will be created and the lib seperatly created we need to add the lib to the project.
For that go to the folder where the project created and add the lib to the project.
In eclipse delete the project and again import the existing gradle project.
Now we can see the lib added to the project.


===================================================================
build:
/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java library project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.8/userguide/building_java_projects.html
 */

plugins {
    // Apply the java-library plugin for API and implementation separation.
    id 'java-library'
}

repositories {
    // Use JCenter for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit test framework.
    
    testImplementation(platform('org.junit:junit-bom:5.10.0'))
	testImplementation('org.junit.jupiter:junit-jupiter')

    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api 'org.apache.commons:commons-math3:3.6.1'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:29.0-jre'
}
// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}
================================================
  After gradle build set:

package Gradledemo;

import org.junit.jupiter.api.Test;

public class DemoTest {
	
	@Test
	public void gradleDemo()
	{
		System.out.println("gradle demo test");
	}

}
